<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="fakestore-products-api-impl-test.xml" />
	<munit:test name="fakestore-products-api-impl-test-get-all-products-flowTest" doc:id="1ef394bf-b65c-4b18-a959-10f45b159d0e" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Call HTTP Get Request" doc:id="2015cc38-ec65-49ef-8ec9-09963decac52" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="GET /products" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="Fakestore_HTTP_Request_configuration" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${fakestore.api.path}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="products" value="#[MunitTools::getResourceAsString('sample/products.json')]" mediaType="application/json" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get-all-products-flow" doc:id="cd6e87a9-cd85-4fe2-9048-f84456d0cba4" name="get:\products:fakestore-products-prc-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Payload" doc:id="0035f417-c301-4ef1-9623-b1b9a8453b08" is="#[MunitTools::equalTo(read(MunitTools::getResourceAsString('sample/products.json'), 'application/json'))]" expression="#[payload]" message='#["Products not found"]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="fakestore-products-api-impl-test-get-all-products-paging-flowTest" doc:id="f2b92ab2-123b-46e0-9e51-29ba7dda3126" description="Test">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Call HTTP Get Request" doc:id="a87a781f-f380-4fe5-809b-50b76fb60b30" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="GET /products" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="Fakestore_HTTP_Request_configuration" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${fakestore.api.path}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:variables>
						<munit-tools:variable key="products" value="#[MunitTools::getResourceAsString('sample/products.json')]" mediaType="application/json" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Event" doc:id="6f676a19-0e3c-44cd-a1db-29f4988d9963">
				<munit:attributes value="#[MunitTools::getResourceAsString('sample/attributes.json')]" mediaType="application/json" />
				<!-- <munit:variables >
					<munit:variable key="pageSize" value="#[ 2 as Number]" />
					<munit:variable key="pageNum" value="#[ 1 as Number]" />
				</munit:variables> -->
			
</munit:set-event>
			<flow-ref doc:name="Flow-ref to get-all-products-flow" doc:id="08fabfd7-8535-4778-8ee1-7de76eb740be" name="get:\products:fakestore-products-prc-api-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Size of Payload" doc:id="255e3838-0d8f-4e4c-9e96-035317f67db4" message='#["Products not found"]' expression="#[sizeOf(payload)]" is="#[MunitTools::equalTo(2)]" />
		</munit:validation>
	</munit:test>
	<munit:test name="fakestore-products-api-impl-test-get-product-by-id-flowTest" doc:id="d3685cd8-69b6-49f2-91c4-174b42d71ac1" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Call HTTP Get Request" doc:id="b5be1d72-e56b-423c-8089-280dba92ed6b" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="GET /products/{id}" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="Fakestore_HTTP_Request_configuration" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${fakestore.api.path}/{id}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="products" value="#[MunitTools::getResourceAsString('sample/product.json')]" mediaType="application/json" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get-product-by-id-flow" doc:id="e52013eb-b662-40ce-873a-2ab87edda090" name="get:\products\(id):fakestore-products-prc-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="315b6842-7554-4c66-8e58-f704c888043c" expression="#[payload]" is="#[MunitTools::equalTo(read(MunitTools::getResourceAsString('sample/product.json'), 'application/json'))]"/>
		</munit:validation>
	</munit:test>
</mule>
