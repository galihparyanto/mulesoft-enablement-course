<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="fakestore-db-api-impl-error-test.xml" />
	<munit:test name="fakestore-db-api-impl-test-checkout-carts-connectivity-error-flowTest" doc:id="831e88ca-f6b9-4047-9128-79b0c1ae4f7c" description="Test" expectedErrorType="CONNECTIVITY">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Call HTTP GET Request" doc:id="5c023e10-d494-4c84-bf88-825c19b61d2a" processor="http:request">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="GET" attributeName="method" />
						<munit-tools:with-attribute whereValue="GET All Products" attributeName="doc:name" />
						<munit-tools:with-attribute whereValue="Fakestore_Product_Request_configuration" attributeName="config-ref" />
						<munit-tools:with-attribute whereValue="${fakestore.api.product.path}" attributeName="path" />
					</munit-tools:with-attributes>
					<munit-tools:then-return>
						<munit-tools:variables>
							<munit-tools:variable key="products" value="#[MunitTools::getResourceAsString('sample/products.json')]" mediaType="application/json" />
						</munit-tools:variables>
					</munit-tools:then-return>
				</munit-tools:mock-when>
				<munit-tools:mock-when doc:name="Call DB Sys API" doc:id="39508cbf-7f6e-44b1-812f-ba6a850358d0" processor="fakestore-db-sys-api:store-all-successfull-transaction-database">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="Store Products Into Database" attributeName="doc:name" />
						<munit-tools:with-attribute whereValue="Fakestore_DB_Sys_API_Config" attributeName="config-ref" />
						<munit-tools:with-attribute whereValue="${secure::fakestore.api.client_id}" attributeName="client-id" />
						<munit-tools:with-attribute whereValue="${secure::fakestore.api.client_secret}" attributeName="client-secret" />
					</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="CONNECTIVITY" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<munit:set-event doc:name="Set Event" doc:id="b2f1b7f0-b039-42b6-98ea-e9c2623bd250">
					<munit:payload value="#[MunitTools::getResourceAsString('sample/cart.json')]" mediaType="application/json" />
				</munit:set-event>
				<flow-ref doc:name="Flow-ref to checkout-carts-flow" doc:id="3c929f54-6aaa-4052-889e-06df226666c1" name="post:\checkout:application\json:fakestore-carts-prc-api-config" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-that doc:name="HTTP Status Code" doc:id="3183040f-090c-4fa2-b36f-b71b8a7a00ec" expression="#[vars.httpStatus]" is="#[MunitTools::equalTo(503)]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-db-api-impl-test-checkout-carts-expression-error-flowTest" doc:id="b5c489b9-821d-4f3d-acc0-ba503be57337" description="Test" expectedErrorType="EXPRESSION">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Call HTTP GET Request" doc:id="be5ace45-2363-4429-9fdd-0c831b1f0492" processor="http:request">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="GET" attributeName="method" />
						<munit-tools:with-attribute whereValue="GET All Products" attributeName="doc:name" />
						<munit-tools:with-attribute whereValue="Fakestore_Product_Request_configuration" attributeName="config-ref" />
						<munit-tools:with-attribute whereValue="${fakestore.api.product.path}" attributeName="path" />
					</munit-tools:with-attributes>
					<munit-tools:then-return>
						<munit-tools:variables>
							<munit-tools:variable key="products" value="#[MunitTools::getResourceAsString('sample/products.json')]" mediaType="application/json" />
						</munit-tools:variables>
					</munit-tools:then-return>
				</munit-tools:mock-when>
				<munit-tools:mock-when doc:name="Call DB Sys API" doc:id="f522f96b-d252-49a4-94dc-7f5f15836ad2" processor="fakestore-db-sys-api:store-all-successfull-transaction-database">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="Store Products Into Database" attributeName="doc:name" />
						<munit-tools:with-attribute whereValue="Fakestore_DB_Sys_API_Config" attributeName="config-ref" />
						<munit-tools:with-attribute whereValue="${secure::fakestore.api.client_id}" attributeName="client-id" />
						<munit-tools:with-attribute whereValue="${secure::fakestore.api.client_secret}" attributeName="client-secret" />
					</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="EXPRESSION" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<munit:set-event doc:name="Set Event" doc:id="4c3483b4-441e-4a22-b474-c4065963d41d">
					<munit:payload value="#[MunitTools::getResourceAsString('sample/cart.json')]" mediaType="application/json" />
				</munit:set-event>
				<flow-ref doc:name="Flow-ref to checkout-carts-flow" doc:id="ece11142-df79-42af-a93d-dbb82e691fff" name="post:\checkout:application\json:fakestore-carts-prc-api-config" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-that doc:name="HTTP Status Code" doc:id="a69fcae1-c75b-4966-b77e-3b011c48306d" expression="#[vars.httpStatus]" is="#[MunitTools::equalTo(500)]" />
			</munit:validation>
		</munit:test>


</mule>
