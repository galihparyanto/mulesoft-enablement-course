<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd ">
    <munit:config name="fakestore-carts-prc-api-apikit-test.xml" />
    <http:request-config name="HTTP_Request_Configuration" basePath="/api">
        <http:request-connection host="localhost" port="8081" />
    </http:request-config>
    <munit:test name="get:\health:fakestore-carts-prc-api-config-400-application\json-FlowTest" description="Verifying functionality of [get:\health:fakestore-carts-prc-api-config-400-application\json]" expectedErrorType="APIKIT:BAD_REQUEST">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="fakestore-carts-prc-api-main" />
            <munit:enable-flow-source value="get:\health:fakestore-carts-prc-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="bc0d9b85-e409-4fef-9be0-6b04eab8c561" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-carts-prc-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
			<flow-ref doc:name="Flow Reference" doc:id="93ca9777-1c05-477a-93e7-997835784700" name="fakestore-carts-prc-api-main"/>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_400_health_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\health:fakestore-carts-prc-api-config-404-application\json-FlowTest" description="Verifying functionality of [get:\health:fakestore-carts-prc-api-config-404-application\json]" expectedErrorType="APIKIT:NOT_FOUND">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="fakestore-carts-prc-api-main" />
            <munit:enable-flow-source value="get:\health:fakestore-carts-prc-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="15fba767-6646-4b02-a272-4a9fe94eddbd" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-carts-prc-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_FOUND" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
			<flow-ref doc:name="Flow Reference" doc:id="fdaa6e9e-8ece-41c2-b806-9fb7b9dd8cdf" name="fakestore-carts-prc-api-main"/>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_404_health_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\health:fakestore-carts-prc-api-config-405-application\json-FlowTest" description="Verifying functionality of [get:\health:fakestore-carts-prc-api-config-405-application\json]" expectedErrorType="APIKIT:METHOD_NOT_ALLOWED">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="fakestore-carts-prc-api-main" />
            <munit:enable-flow-source value="get:\health:fakestore-carts-prc-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="42f737fe-5504-4013-978b-6c23c1d1d9ce" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-carts-prc-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:METHOD_NOT_ALLOWED" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
			<flow-ref doc:name="Flow Reference" doc:id="34ebe92c-9818-403d-a25d-9857124c784c" name="fakestore-carts-prc-api-main"/>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(405)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 405" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_405_health_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\health:fakestore-carts-prc-api-config-406-application\json-FlowTest" description="Verifying functionality of [get:\health:fakestore-carts-prc-api-config-406-application\json]" expectedErrorType="APIKIT:NOT_ACCEPTABLE">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="fakestore-carts-prc-api-main" />
            <munit:enable-flow-source value="get:\health:fakestore-carts-prc-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="ac73e14b-43ea-4d56-9a3a-34d649873970" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-carts-prc-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_ACCEPTABLE" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
			<flow-ref doc:name="Flow Reference" doc:id="1a3b1692-74a6-47f2-a984-83db7aa720cb" name="fakestore-carts-prc-api-main"/>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(406)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 406" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_406_health_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\health:fakestore-carts-prc-api-config-415-application\json-FlowTest" description="Verifying functionality of [get:\health:fakestore-carts-prc-api-config-415-application\json]" expectedErrorType="APIKIT:UNSUPPORTED_MEDIA_TYPE">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="fakestore-carts-prc-api-main" />
            <munit:enable-flow-source value="get:\health:fakestore-carts-prc-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="436a2b25-a296-41dc-87e0-7f894c2c82ca" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-carts-prc-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:UNSUPPORTED_MEDIA_TYPE" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
			<flow-ref doc:name="Flow Reference" doc:id="c6eb582e-cf7d-4659-a223-6ee4e072e612" name="fakestore-carts-prc-api-main"/>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(415)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 415" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_406_health_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\health:fakestore-carts-prc-api-config-500-application\json-FlowTest" description="Verifying functionality of [get:\health:fakestore-carts-prc-api-config-500-application\json]" expectedErrorType="HTTP:INTERNAL_SERVER_ERROR">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="fakestore-carts-prc-api-main" />
            <munit:enable-flow-source value="get:\health:fakestore-carts-prc-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="ff8fcd77-e300-48f6-b9a7-1a69ae530be8" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-carts-prc-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:INTERNAL_SERVER_ERROR" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
			<flow-ref doc:name="Flow Reference" doc:id="8c9f4045-d5c5-4d1e-839f-dc2e77781aee" name="fakestore-carts-prc-api-main"/>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 500" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_500_health_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\health:fakestore-carts-prc-api-config-501-application\json-FlowTest" description="Verifying functionality of [get:\health:fakestore-carts-prc-api-config-501-application\json]" expectedErrorType="APIKIT:NOT_IMPLEMENTED">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="fakestore-carts-prc-api-main" />
            <munit:enable-flow-source value="get:\health:fakestore-carts-prc-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="1d7d9a9e-74e7-4c73-b3c5-974175924e84" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-carts-prc-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_IMPLEMENTED" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow Reference" doc:id="ab332332-ff99-4e16-bb5e-98ede67887c9" name="fakestore-carts-prc-api-main"/>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(501)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 501" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_501_health_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\health:fakestore-carts-prc-api-config-503-application\json-FlowTest" description="Verifying functionality of [get:\health:fakestore-carts-prc-api-config-503-application\json]" expectedErrorType="HTTP:SERVICE_UNAVAILABLE">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="fakestore-carts-prc-api-main" />
            <munit:enable-flow-source value="get:\health:fakestore-carts-prc-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="71fbaba7-63b0-41b8-a3e8-99b74113b6c6" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-carts-prc-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:SERVICE_UNAVAILABLE" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
			<flow-ref doc:name="Flow Reference" doc:id="148f6233-c992-42c0-ac51-61d375170851" name="fakestore-carts-prc-api-main"/>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(503)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 503" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_503_health_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\health:fakestore-carts-prc-api-config-401--FlowTest" description="Verifying functionality of [get:\health:fakestore-carts-prc-api-config-401-]" expectedErrorType="HTTP:UNAUTHORIZED">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="fakestore-carts-prc-api-main" />
            <munit:enable-flow-source value="get:\health:fakestore-carts-prc-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="9effa602-5c62-438a-af51-edcb3897104b" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-carts-prc-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:UNAUTHORIZED" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
			<flow-ref doc:name="Flow Reference" doc:id="a81332c6-9787-4adf-98d9-5069f96ab27d" name="fakestore-carts-prc-api-main"/>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(401)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 401" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\health:fakestore-carts-prc-api-config-429--FlowTest" description="Verifying functionality of [get:\health:fakestore-carts-prc-api-config-429-]" expectedErrorType="HTTP:TOO_MANY_REQUESTS">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="fakestore-carts-prc-api-main" />
            <munit:enable-flow-source value="get:\health:fakestore-carts-prc-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="7fb9eb4d-ded4-4d70-bf54-3d5fc3d990b7" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-carts-prc-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:TOO_MANY_REQUESTS" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
			<flow-ref doc:name="Flow Reference" doc:id="ef740f5b-1f9b-4ec6-87e3-82efbdfcc521" name="fakestore-carts-prc-api-main"/>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(429)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 429" />
        </munit:validation>
    </munit:test>
</mule>
