<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="fakestore-db-api-impl-test.xml" />
	<munit:test name="fakestore-db-api-impl-test-checkout-carts-flowTest" doc:id="82f8c984-fc56-4a82-b320-dcce1fa29221" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Call HTTP GET Request" doc:id="14a9c925-d3db-418d-9eb6-58ab1d758022" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="GET All Products" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="Fakestore_Product_Request_configuration" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${fakestore.api.product.path}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="products" value="#[MunitTools::getResourceAsString('sample/products.json')]" mediaType="application/json" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Call DB Sys API" doc:id="e2273be0-132a-4f9c-8c22-814c18c449e4" processor="fakestore-db-sys-api:store-all-successfull-transaction-database">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Store Products Into Database" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="Fakestore_DB_Sys_API_Config" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${secure::fakestore.api.client_id}" attributeName="client-id" />
					<munit-tools:with-attribute whereValue="${secure::fakestore.api.client_secret}" attributeName="client-secret" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('sample/checkout.json')]" mediaType="application/json" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="51f565ba-33d0-4033-b827-2404c75c1bbe" >
				<munit:payload value="#[MunitTools::getResourceAsString('sample/cart.json')]" mediaType="application/json" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to checkout-carts-flow" doc:id="15b5bdee-4977-497d-ad64-f4ccf3639d22" name="post:\checkout:application\json:fakestore-carts-prc-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="6d51c106-8dd2-4870-a113-113afbe7eabd" expression="#[payload]" is="#[MunitTools::equalTo(read(MunitTools::getResourceAsString('sample/checkout.json'), 'application/json'))]"/>
		</munit:validation>
	</munit:test>


</mule>
